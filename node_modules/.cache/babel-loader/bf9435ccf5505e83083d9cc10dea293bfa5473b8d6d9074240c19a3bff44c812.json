{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041B\\u0438\\u043B\\u0438\\u0430\\u043D\\u0430\\\\Documents\\\\z\\\\react js\\\\www\\\\src\\\\components\\\\Users.js\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Users extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.users = [\n      // { // это массив, в котором есть 2 объекта\n      //          id: 1, /*id, Name и пр. это ключи*/ \n      //          Name: 'Tommas',\n      //          Surname: 'Bang',\n      //          Email: 'tombang@yandex.ru',\n      //          Age: 34,\n      //          Married: true\n      // },\n      // {\n      //          id: 2,\n      //          Name: 'Nickole',\n      //          Surname: 'Vee',\n      //          Email: 'nickkieV@yandex.ru',\n      //          Age: 19,\n      //          Married: false  \n      //  }\n    ];\n  }\n  render() {\n    if (this.users.length > 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.users.map(element =>\n      /*#__PURE__*/\n      //this так как это class. Мы тут обращаемся к классу users и задаем метод map (заранее известную), чтобы перебрать массив users. \n      _jsxDEV(\"div\", {\n        className: \"user\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [element.Name, \" \", element.Surname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: element.Email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 37\n        }, this)]\n      }, element.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 28\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"usersEmpty\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this);\n  }\n}\nexport default Users;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Users","Component","constructor","args","users","render","length","children","map","element","className","Name","Surname","fileName","_jsxFileName","lineNumber","columnNumber","Email","id"],"sources":["C:/Users/Лилиана/Documents/z/react js/www/src/components/Users.js"],"sourcesContent":["import React from \"react\";\r\n\r\n\r\nclass Users extends React.Component {\r\n\r\n         users = [\r\n         // { // это массив, в котором есть 2 объекта\r\n         //          id: 1, /*id, Name и пр. это ключи*/ \r\n         //          Name: 'Tommas',\r\n         //          Surname: 'Bang',\r\n         //          Email: 'tombang@yandex.ru',\r\n         //          Age: 34,\r\n         //          Married: true\r\n         // },\r\n         // {\r\n         //          id: 2,\r\n         //          Name: 'Nickole',\r\n         //          Surname: 'Vee',\r\n         //          Email: 'nickkieV@yandex.ru',\r\n         //          Age: 19,\r\n         //          Married: false  \r\n         //  }\r\n]\r\n    render() {\r\n\r\nif(this.users.length > 0)\r\n\r\n         return (\r\n           <div>\r\n                  {this.users.map((element) => ( //this так как это class. Мы тут обращаемся к классу users и задаем метод map (заранее известную), чтобы перебрать массив users. \r\n                           <div className=\"user\" key={element.id} /*у каждого элемента из массива должно быть уникальное значение, в данном случае id*/ > \r\n                                    <h3>{element.Name} {element.Surname}</h3>\r\n                                    <p>{element.Email}</p>\r\n                           </div>\r\n                  )\r\n                  )\r\n         }\r\n           </div>\r\n           )\r\n\r\n           else\r\n           return (\r\n                  <div className=\"usersEmpty\">\r\n                        <h3>Пользователей не найдено</h3>\r\n                  </div>\r\n                  )\r\n\r\n         }\r\n\r\n        }\r\n\r\n\r\nexport default Users"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,KAAK,SAASH,KAAK,CAACI,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KAE3BC,KAAK,GAAG;MACR;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA,CACR;EAAA;EACGC,MAAMA,CAAA,EAAG;IAEb,IAAG,IAAI,CAACD,KAAK,CAACE,MAAM,GAAG,CAAC,EAEf,oBACEP,OAAA;MAAAQ,QAAA,EACQ,IAAI,CAACH,KAAK,CAACI,GAAG,CAAEC,OAAO;MAAA;MAAO;MACtBV,OAAA;QAAKW,SAAS,EAAC,MAAM;QAAAH,QAAA,gBACZR,OAAA;UAAAQ,QAAA,GAAKE,OAAO,CAACE,IAAI,EAAC,GAAC,EAACF,OAAO,CAACG,OAAO;QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACzCjB,OAAA;UAAAQ,QAAA,EAAIE,OAAO,CAACQ;QAAK;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFJP,OAAO,CAACS,EAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGhC,CAEd;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEH,CAAC,CACL,KAGD,oBACOjB,OAAA;MAAKW,SAAS,EAAC,YAAY;MAAAH,QAAA,eACrBR,OAAA;QAAAQ,QAAA,EAAI;MAAwB;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAGf;AAED;AAGR,eAAehB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}