{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u041B\\u0438\\u043B\\u0438\\u0430\\u043D\\u0430\\\\Documents\\\\z\\\\react js\\\\www\\\\src\\\\components\\\\Users.js\";\nimport React from \"react\";\nimport User from \"./User\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Users extends React.Component {\n  constructor(props) {\n    //для записи состояний\n    super(props); // обязательная строка\n    this.state = {\n      users: [\n      //в таком варианте сам массив является состоянием\n      {\n        // это массив, в котором есть 2 объекта\n        id: 1,\n        /*id, Name и пр. это ключи*/\n        Name: 'Tommas',\n        Surname: 'Bang',\n        Email: 'tombang@yandex.ru',\n        Age: 34,\n        Married: true\n      }, {\n        id: 2,\n        Name: 'Nickole',\n        Surname: 'Vee',\n        Email: 'nickkiev@yandex.ru',\n        Age: 19,\n        Married: false\n      }]\n    };\n  }\n  render() {\n    if (this.state.users.length > 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.users.map(element =>\n      /*#__PURE__*/\n      //this так как это class. Мы тут обращаемся к классу users и задаем метод map (заранее известную), чтобы перебрать массив users. \n      _jsxDEV(User, {\n        user: element\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 20\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 12\n    }, this);else return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"usersEmpty\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439 \\u043D\\u0435 \\u043D\\u0430\\u0439\\u0434\\u0435\\u043D\\u043E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 19\n    }, this);\n  }\n}\nexport default Users;","map":{"version":3,"names":["React","User","jsxDEV","_jsxDEV","Users","Component","constructor","props","state","users","id","Name","Surname","Email","Age","Married","render","length","children","map","element","user","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["C:/Users/Лилиана/Documents/z/react js/www/src/components/Users.js"],"sourcesContent":["import React from \"react\";\r\nimport User from \"./User\";\r\n\r\n\r\nclass Users extends React.Component {\r\n\r\n         constructor(props) { //для записи состояний\r\n                  super(props) // обязательная строка\r\n                  this.state = {\r\n                           users: [ //в таком варианте сам массив является состоянием\r\n                                    { // это массив, в котором есть 2 объекта\r\n                                             id: 1, /*id, Name и пр. это ключи*/ \r\n                                             Name: 'Tommas',\r\n                                             Surname: 'Bang',\r\n                                             Email: 'tombang@yandex.ru',\r\n                                             Age: 34,\r\n                                             Married: true\r\n                                    },\r\n                                    {\r\n                                             id: 2,\r\n                                             Name: 'Nickole',\r\n                                             Surname: 'Vee',\r\n                                             Email: 'nickkiev@yandex.ru',\r\n                                             Age: 19,\r\n                                             Married: false  \r\n                                     }\r\n                           ]\r\n                  }\r\n         }\r\n         \r\n    render() {\r\n\r\n         if(this.state.users.length > 0)\r\n\r\n         return (\r\n           <div>\r\n                  {this.state.users.map((element) => ( //this так как это class. Мы тут обращаемся к классу users и задаем метод map (заранее известную), чтобы перебрать массив users. \r\n                   <User key={element.id} user={element}/>        \r\n                  ))}\r\n                   </div>)\r\n           else\r\n           return (\r\n                  <div className=\"usersEmpty\">\r\n                        <h3>Пользователей не найдено</h3>\r\n                  </div>\r\n                  )\r\n         }\r\n        }\r\n\r\n\r\n\r\nexport default Users"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,MAAMC,KAAK,SAASJ,KAAK,CAACK,SAAS,CAAC;EAE3BC,WAAWA,CAACC,KAAK,EAAE;IAAE;IACZ,KAAK,CAACA,KAAK,CAAC,EAAC;IACb,IAAI,CAACC,KAAK,GAAG;MACJC,KAAK,EAAE;MAAE;MACA;QAAE;QACOC,EAAE,EAAE,CAAC;QAAE;QACPC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,MAAM;QACfC,KAAK,EAAE,mBAAmB;QAC1BC,GAAG,EAAE,EAAE;QACPC,OAAO,EAAE;MAClB,CAAC,EACD;QACSL,EAAE,EAAE,CAAC;QACLC,IAAI,EAAE,SAAS;QACfC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAE,oBAAoB;QAC3BC,GAAG,EAAE,EAAE;QACPC,OAAO,EAAE;MACjB,CAAC;IAEpB,CAAC;EACV;EAELC,MAAMA,CAAA,EAAG;IAEJ,IAAG,IAAI,CAACR,KAAK,CAACC,KAAK,CAACQ,MAAM,GAAG,CAAC,EAE9B,oBACEd,OAAA;MAAAe,QAAA,EACQ,IAAI,CAACV,KAAK,CAACC,KAAK,CAACU,GAAG,CAAEC,OAAO;MAAA;MAAO;MACpCjB,OAAA,CAACF,IAAI;QAAkBoB,IAAI,EAAED;MAAQ,GAA1BA,OAAO,CAACV,EAAE;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,CAAC,KAEf,oBACOtB,OAAA;MAAKuB,SAAS,EAAC,YAAY;MAAAR,QAAA,eACrBf,OAAA;QAAAe,QAAA,EAAI;MAAwB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAEf;AACD;AAIR,eAAerB,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}